server:
  port: 8080

#异步任务线程池配置
async:
  corePoolSize: 2
  maxPoolSize: 10
  queueSize: 1000

routes:
  first-service: http://localhost:8081
  second-service: http://localhost:8082

spring:
  #数据源
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/demo
    username: root
    password: abc123_
  cloud:
    gateway:
#      globalcors:
#        cors-configurations:
#          '[/**]':
#            allowedOrigins: "http://localhost:7070"
#            allowedHeaders: "*"
#            allowedMethods:
#              - OPTIONS
#              - GET
#              - PUT
#              - POST
#              - DELETE
      routes:
          # id: 只是一个有意义的，唯一的名字，用于和其他route区分
        - id: first-service
          # uri: 请求将要被转发到的地方
          uri: ${routes.first-service}
          # predicates: 在什么条件下会转发。gateway只有在条件满足的情况下才会转发请求
          predicates:
              # 参看所有支持的predicate类型:
              # https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories
            - Path=/first-service/**
          # filters: 可以在filter中，对request/response进行额外的处理
          # 注意：filter的执行顺序，就是声明的顺序
          filters:
              # 参看所有内置的GatewayFilter:
              # https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories
            - LoggingFilter
            - AuthFilter
        - id: second-service
          uri: ${routes.second-service}
          predicates:
            - Path=/second-service/**
          filters:
            - AuthFilter
            - LoggingFilter
management:
  endpoint:
    health:
      # 是否启用health端点，开启后可以访问/actuator/health。默认值true。详细配置可参见：
      # https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/application-properties.html
      enabled: true
      # 给health端点定义一个健康状态的组
      group:
        # 组名叫custom，之后可以访问/actuator/health/gateway
        gateway:
          include: ping, my-services
          show-components: always
          show-details: always